import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Question } from '../model/Question';
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root'
})
export class QuestionService {

  private apiUrl = environment.apiUrl;

  constructor(
    private http: HttpClient
  ) { }

  /**
   * Retrieves the list of questions for a specific quiz from the backend API.
   *
   * @param quizId - The ID of the quiz whose questions are to be retrieved.
   * @returns An Observable emitting an array of `Question` objects.
   *
   * @remarks
   * This method sends an HTTP GET request to the `/question/quiz/{quizId}` endpoint of the configured API URL.
   * The returned observable will emit the questions once the HTTP request completes successfully.
   *
   * @example
   * this.questionService.getQuestionsOfQuiz(1).subscribe(questions => {
   *   console.log(questions);
   * });
   */
  public getQuestionsOfQuiz(quizId: number): Observable<Question[]> {
    return this.http.get<Question[]>(`${this.apiUrl}/question/quiz/${quizId}`);
  }

  /**
   * Adds a new question to the backend API.
   * @param quesId The ID of the question to be added (usually not needed as it's generated by the backend).
   * @param question The question object to be added
   * @returns An Observable emitting the added question
   */
  public addQuestion(question: Question): Observable<Question> {
    return this.http.post<Question>(`${this.apiUrl}/question/`, question);
  }

  /**
   * 
   * @param quesId The ID of the question to be deleted.
   * Deletes a question by its ID from the backend API.
   * Sends an HTTP DELETE request to the `/question/{quesId}` endpoint.
   * 
   * @remarks
   * This method returns an Observable that completes when the deletion is successful.
   * If the question with the specified ID does not exist, the backend may return an error.
   * 
   * @example
   * this.questionService.deleteQuestion(1).subscribe(() => {
   *   console.log('Question deleted successfully');
   * });
   * @returns An Observable that completes when the deletion is successful.
   * The observable emits no items upon completion.
   */
  public  deleteQuestion(quesId: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/question/${quesId}`);
  }

  /**
   * Retrieves a specific question by its ID from the backend API.
   * @param quesId The ID of the question to be retrieved.
   * @returns An Observable emitting the requested question.
   */
  public getQuestion(quesId: number): Observable<Question> {
    return this.http.get<Question>(`${this.apiUrl}/question/${quesId}`);
  }

  /**
   * Updates an existing question in the backend API.
   * @param question The question object containing updated data.
   * @returns An Observable emitting the updated question.
   */
  public updateQuestion(question: Question) {
    return this.http.put<Question>(`${this.apiUrl}/question`, question);
  }
    
}
