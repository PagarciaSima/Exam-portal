{"ast":null,"code":"import { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/login.service\";\nimport * as i2 from \"@angular/router\";\n/**\r\n * Guard to protect routes for users with the 'NORMAL' role.\r\n *\r\n * This guard checks if the user is logged in and has the 'NORMAL' role.\r\n * If the user does not meet these criteria, they are redirected to the login page.\r\n *\r\n * @remarks\r\n * Implements Angular's `CanActivate` interface to control route activation.\r\n *\r\n * @example\r\n * // Usage in routing module\r\n * {\r\n *   path: 'normal-dashboard',\r\n *   component: NormalDashboardComponent,\r\n *   canActivate: [NormalGuard]\r\n * }\r\n */\n\nexport let NormalGuard = /*#__PURE__*/(() => {\n  class NormalGuard {\n    constructor(loginService, router) {\n      this.loginService = loginService;\n      this.router = router;\n    }\n\n    canActivate(route, state) {\n      if (this.loginService.isLoggedIn() && this.loginService.getUserRole() == 'NORMAL') {\n        return true;\n      }\n\n      this.router.navigate(['login']);\n      return false;\n    }\n\n  }\n\n  NormalGuard.ɵfac = function NormalGuard_Factory(t) {\n    return new (t || NormalGuard)(i0.ɵɵinject(i1.LoginService), i0.ɵɵinject(i2.Router));\n  };\n\n  NormalGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NormalGuard,\n    factory: NormalGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return NormalGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}