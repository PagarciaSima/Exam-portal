{"ast":null,"code":"import { HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpRequest, HttpErrorResponse } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/login.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/notification.service\";\nconst TOKEN_HEADER = 'Authorization';\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(loginService, router, notificationService) {\n      this.loginService = loginService;\n      this.router = router;\n      this.notificationService = notificationService;\n    }\n\n    intercept(req, next) {\n      let authReq = req;\n      const token = this.loginService.getToken();\n\n      if (token) {\n        authReq = authReq.clone({\n          setHeaders: {\n            [TOKEN_HEADER]: `Bearer ${token}`\n          }\n        });\n      }\n\n      return next.handle(authReq).pipe(catchError(err => {\n        if (err.status === 401 && err.error?.error === 'JWT Token has expired') {\n          // Redirigir al login\n          this.loginService.logout();\n          this.router.navigate(['/login']);\n          this.notificationService.warning('Session has expired. Please log in again.', 'Session Expired');\n        }\n\n        return throwError(() => err);\n      }));\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.LoginService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NotificationService));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();\nexport const authInterceptorProvider = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n}];","map":null,"metadata":{},"sourceType":"module"}