{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let QuestionService = /*#__PURE__*/(() => {\n  class QuestionService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.apiUrl;\n    }\n    /**\r\n     * Retrieves the list of questions for a specific quiz from the backend API.\r\n     *\r\n     * @param quizId - The ID of the quiz whose questions are to be retrieved.\r\n     * @returns An Observable emitting an array of `Question` objects.\r\n     *\r\n     * @remarks\r\n     * This method sends an HTTP GET request to the `/question/quiz/{quizId}` endpoint of the configured API URL.\r\n     * The returned observable will emit the questions once the HTTP request completes successfully.\r\n     *\r\n     * @example\r\n     * this.questionService.getQuestionsOfQuiz(1).subscribe(questions => {\r\n     *   console.log(questions);\r\n     * });\r\n     */\n\n\n    getQuestionsOfQuiz(quizId) {\n      return this.http.get(`${this.apiUrl}/question/quiz/${quizId}`);\n    }\n    /**\r\n     * Adds a new question to the backend API.\r\n     * @param quesId The ID of the question to be added (usually not needed as it's generated by the backend).\r\n     * @param question The question object to be added\r\n     * @returns An Observable emitting the added question\r\n     */\n\n\n    addQuestion(question) {\n      return this.http.post(`${this.apiUrl}/question/`, question);\n    }\n    /**\r\n     * Adds a new question with optional image to the backend API.\r\n     * @param question The question object to be added.\r\n     * @param imageFile Optional image file for the question.\r\n     * @returns An Observable emitting the added question.\r\n     */\n\n\n    addQuestionWithImage(question, imageFile) {\n      const formData = new FormData();\n      formData.append('question', new Blob([JSON.stringify(question)], {\n        type: 'application/json'\n      }));\n\n      if (imageFile) {\n        formData.append('image', imageFile);\n      }\n\n      return this.http.post(`${this.apiUrl}/question/add`, formData);\n    }\n    /**\r\n     *\r\n     * @param quesId The ID of the question to be deleted.\r\n     * Deletes a question by its ID from the backend API.\r\n     * Sends an HTTP DELETE request to the `/question/{quesId}` endpoint.\r\n     *\r\n     * @remarks\r\n     * This method returns an Observable that completes when the deletion is successful.\r\n     * If the question with the specified ID does not exist, the backend may return an error.\r\n     *\r\n     * @example\r\n     * this.questionService.deleteQuestion(1).subscribe(() => {\r\n     *   console.log('Question deleted successfully');\r\n     * });\r\n     * @returns An Observable that completes when the deletion is successful.\r\n     * The observable emits no items upon completion.\r\n     */\n\n\n    deleteQuestion(quesId) {\n      return this.http.delete(`${this.apiUrl}/question/${quesId}`);\n    }\n    /**\r\n     * Retrieves a specific question by its ID from the backend API.\r\n     * @param quesId The ID of the question to be retrieved.\r\n     * @returns An Observable emitting the requested question.\r\n     */\n\n\n    getQuestion(quesId) {\n      return this.http.get(`${this.apiUrl}/question/${quesId}`);\n    }\n    /**\r\n     * Updates an existing question in the backend API.\r\n     * @param question The question object containing updated data.\r\n     * @returns An Observable emitting the updated question.\r\n     */\n\n\n    updateQuestion(question) {\n      return this.http.put(`${this.apiUrl}/question`, question);\n    }\n    /**\r\n     * Retrieves paginated questions for a specific quiz.\r\n     * @param quizId The quiz ID.\r\n     * @param page The page number (zero-based).\r\n     * @param size The number of items per page.\r\n     * @returns An Observable emitting a Page object with questions.\r\n     */\n\n\n    getQuestionsOfQuizPaged(quizId, page, size, search) {\n      let url = `${this.apiUrl}/question/quiz/${quizId}/paged?page=${page}&size=${size}`;\n\n      if (search && search.trim()) {\n        url += `&search=${encodeURIComponent(search.trim())}`;\n      }\n\n      return this.http.get(url);\n    }\n\n  }\n\n  QuestionService.ɵfac = function QuestionService_Factory(t) {\n    return new (t || QuestionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  QuestionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuestionService,\n    factory: QuestionService.ɵfac,\n    providedIn: 'root'\n  });\n  return QuestionService;\n})();","map":null,"metadata":{},"sourceType":"module"}