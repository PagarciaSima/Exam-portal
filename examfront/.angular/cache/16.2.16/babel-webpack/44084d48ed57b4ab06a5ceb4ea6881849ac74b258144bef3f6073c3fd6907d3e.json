{"ast":null,"code":"import { slideIn } from 'src/app/animations/animations';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/notification.service\";\nimport * as i3 from \"src/app/services/category.service\";\nimport * as i4 from \"@ngx-translate/core\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/icon\";\nimport * as i10 from \"@angular/forms\";\nimport * as i11 from \"@angular/material/card\";\nconst _c0 = [\"categoryForm\"];\nfunction AddCategoryComponent_mat_error_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\", 20);\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(1, 2, \"CATEGORY_TITLE_REQUIRED\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, \"CATEGORY_TITLE_REQUIRED\"), \" \");\n  }\n}\nfunction AddCategoryComponent_mat_error_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\", 21);\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(1, 2, \"CATEGORY_DESCRIPTION_REQUIRED\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, \"CATEGORY_DESCRIPTION_REQUIRED\"), \" \");\n  }\n}\nexport let AddCategoryComponent = /*#__PURE__*/(() => {\n  class AddCategoryComponent {\n    constructor(router, notificationService, categoryService, translate, route) {\n      this.router = router;\n      this.notificationService = notificationService;\n      this.categoryService = categoryService;\n      this.translate = translate;\n      this.route = route;\n      this.isEditMode = false;\n      this.category = {\n        cid: 0,\n        title: '',\n        description: ''\n      };\n    }\n    ngOnInit() {\n      this.route.paramMap.subscribe(params => {\n        const cid = params.get('cid');\n        if (cid) {\n          this.isEditMode = true;\n          this.loadCategory(+cid);\n        } else {\n          this.isEditMode = false;\n          this.category = {\n            cid: 0,\n            title: '',\n            description: ''\n          };\n        }\n      });\n    }\n    /**\r\n     * Loads a category by its ID and assigns it to the local `category` property.\r\n     * Displays an error notification if the request fails.\r\n     *\r\n     * @param {number} cId - The ID of the category to load.\r\n     * @returns {void}\r\n     */\n    loadCategory(cId) {\n      this.categoryService.getCategory(cId).subscribe({\n        next: category => {\n          this.category = category;\n        },\n        error: () => {\n          this.notificationService.error(this.translate.instant('CATEGORY_LOAD_ERROR'), this.translate.instant('ERROR'));\n        }\n      });\n    }\n    /**\r\n     * Handles the form submission for adding or editing a category.\r\n     * Calls the appropriate method based on the current mode (add or edit).\r\n     */\n    formSubmit() {\n      // Trim inputs\n      this.category.title = this.category.title.trim();\n      this.category.description = this.category.description.trim();\n      if (this.isEditMode) {\n        this.editCategory();\n      } else {\n        this.addCategory();\n      }\n    }\n    /**\r\n     * Sends a request to add a new category using the CategoryService.\r\n     * Displays success or error notifications based on the outcome of the operation.\r\n     * Navigates back to the categories list upon successful addition.\r\n     *\r\n     * @returns void\r\n     *\r\n     * @example\r\n     * this.addCategory();\r\n     */\n    addCategory() {\n      this.categoryService.addCategory(this.category).subscribe({\n        next: () => {\n          this.notificationService.success(this.translate.instant('CATEGORY_ADD_SUCCESS'), this.translate.instant('SUCCESS'));\n          this.resetForm();\n          this.router.navigate(['/admin/categories']);\n        },\n        error: () => {\n          this.notificationService.error(this.translate.instant('CATEGORY_ADD_ERROR'), this.translate.instant('ERROR'));\n        }\n      });\n    }\n    /**\r\n     * Sends a request to update an existing category using the CategoryService.\r\n     * Displays success or error notifications based on the outcome of the operation.\r\n     * Navigates back to the categories list upon successful update.\r\n     *\r\n     * @returns void\r\n     *\r\n     * @example\r\n     * this.editCategory();\r\n     */\n    editCategory() {\n      this.categoryService.updateCategory(this.category).subscribe({\n        next: () => {\n          this.notificationService.success(this.translate.instant('CATEGORY_UPDATE_SUCCESS'), this.translate.instant('SUCCESS'));\n          this.resetForm();\n          this.router.navigate(['/admin/categories']);\n        },\n        error: () => {\n          this.notificationService.error(this.translate.instant('CATEGORY_UPDATE_ERROR'), this.translate.instant('ERROR'));\n        }\n      });\n    }\n    /**\r\n     * Resets the form and clears the category object.\r\n     */\n    resetForm() {\n      this.category = {\n        cid: 0,\n        title: '',\n        description: ''\n      };\n      if (this.categoryForm) {\n        this.categoryForm.resetForm();\n      }\n    }\n    static {\n      this.ɵfac = function AddCategoryComponent_Factory(t) {\n        return new (t || AddCategoryComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.NotificationService), i0.ɵɵdirectiveInject(i3.CategoryService), i0.ɵɵdirectiveInject(i4.TranslateService), i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: AddCategoryComponent,\n        selectors: [[\"app-add-category\"]],\n        viewQuery: function AddCategoryComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.categoryForm = _t.first);\n          }\n        },\n        decls: 36,\n        vars: 34,\n        consts: [[\"role\", \"form\", \"aria-labelledby\", \"add-category-title\"], [1, \"text-center\", 2, \"display\", \"flex\", \"align-items\", \"center\", \"justify-content\", \"center\"], [\"aria-hidden\", \"true\", 2, \"margin-right\", \"8px\"], [1, \"bootstrap-wrapper\"], [1, \"row\"], [1, \"col-md-8\", \"offset-md-2\"], [\"aria-labelledby\", \"add-category-title\", \"autocomplete\", \"on\", \"novalidate\", \"\", 3, \"ngSubmit\"], [\"categoryForm\", \"ngForm\"], [\"appearance\", \"outline\", 1, \"w100\"], [\"id\", \"category-title-label\"], [\"type\", \"text\", \"name\", \"title\", \"matInput\", \"\", \"required\", \"\", \"autofocus\", \"\", \"aria-required\", \"true\", \"aria-describedby\", \"category-title-error\", \"aria-labelledby\", \"category-title-label\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"title\", \"ngModel\"], [\"id\", \"category-title-error\", \"role\", \"alert\", 4, \"ngIf\"], [\"appearance\", \"outline\", 1, \"w100\", \"mt20\"], [\"id\", \"category-description-label\"], [\"name\", \"description\", \"matInput\", \"\", \"rows\", \"15\", \"required\", \"\", \"aria-required\", \"true\", \"aria-describedby\", \"category-description-error\", \"aria-labelledby\", \"category-description-label\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"description\", \"ngModel\"], [\"id\", \"category-description-error\", \"role\", \"alert\", 4, \"ngIf\"], [1, \"container\", \"text-center\", \"mt20\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"], [\"id\", \"category-title-error\", \"role\", \"alert\"], [\"id\", \"category-description-error\", \"role\", \"alert\"]],\n        template: function AddCategoryComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"h1\", 1)(2, \"mat-icon\", 2);\n            i0.ɵɵtext(3, \"category\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(4);\n            i0.ɵɵpipe(5, \"translate\");\n            i0.ɵɵpipe(6, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(7, \"mat-card-content\")(8, \"div\", 3)(9, \"div\", 4)(10, \"div\", 5)(11, \"form\", 6, 7);\n            i0.ɵɵlistener(\"ngSubmit\", function AddCategoryComponent_Template_form_ngSubmit_11_listener() {\n              return ctx.formSubmit();\n            });\n            i0.ɵɵelementStart(13, \"mat-form-field\", 8)(14, \"mat-label\", 9);\n            i0.ɵɵtext(15);\n            i0.ɵɵpipe(16, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(17, \"input\", 10, 11);\n            i0.ɵɵlistener(\"ngModelChange\", function AddCategoryComponent_Template_input_ngModelChange_17_listener($event) {\n              return ctx.category.title = $event;\n            });\n            i0.ɵɵpipe(19, \"translate\");\n            i0.ɵɵpipe(20, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(21, AddCategoryComponent_mat_error_21_Template, 4, 6, \"mat-error\", 12);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(22, \"mat-form-field\", 13)(23, \"mat-label\", 14);\n            i0.ɵɵtext(24);\n            i0.ɵɵpipe(25, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(26, \"textarea\", 15, 16);\n            i0.ɵɵlistener(\"ngModelChange\", function AddCategoryComponent_Template_textarea_ngModelChange_26_listener($event) {\n              return ctx.category.description = $event;\n            });\n            i0.ɵɵpipe(28, \"translate\");\n            i0.ɵɵpipe(29, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(30, AddCategoryComponent_mat_error_30_Template, 4, 6, \"mat-error\", 17);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(31, \"div\", 18)(32, \"button\", 19);\n            i0.ɵɵtext(33);\n            i0.ɵɵpipe(34, \"translate\");\n            i0.ɵɵpipe(35, \"translate\");\n            i0.ɵɵelementEnd()()()()()()()();\n          }\n          if (rf & 2) {\n            const _r0 = i0.ɵɵreference(12);\n            const _r1 = i0.ɵɵreference(18);\n            const _r3 = i0.ɵɵreference(27);\n            i0.ɵɵproperty(\"@slideIn\", undefined);\n            i0.ɵɵadvance(4);\n            i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? i0.ɵɵpipeBind1(5, 14, \"EDIT_CATEGORY\") : i0.ɵɵpipeBind1(6, 16, \"ADD_CATEGORY\"), \" \");\n            i0.ɵɵadvance(11);\n            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(16, 18, \"CATEGORY_TITLE_LABEL\"));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"placeholder\", i0.ɵɵpipeBind1(19, 20, \"CATEGORY_TITLE_PLACEHOLDER\"))(\"ngModel\", ctx.category.title);\n            i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(20, 22, \"CATEGORY_TITLE_LABEL\"));\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", _r1.invalid && (_r1.dirty || _r1.touched));\n            i0.ɵɵadvance(3);\n            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(25, 24, \"CATEGORY_DESCRIPTION_LABEL\"));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"placeholder\", i0.ɵɵpipeBind1(28, 26, \"CATEGORY_DESCRIPTION_PLACEHOLDER\"))(\"ngModel\", ctx.category.description);\n            i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(29, 28, \"CATEGORY_DESCRIPTION_LABEL\"));\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", _r3.invalid && (_r3.dirty || _r3.touched));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"disabled\", _r0.invalid);\n            i0.ɵɵadvance(1);\n            i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? i0.ɵɵpipeBind1(34, 30, \"UPDATE_CATEGORY_BUTTON\") : i0.ɵɵpipeBind1(35, 32, \"ADD_CATEGORY_BUTTON\"), \" \");\n          }\n        },\n        dependencies: [i5.NgIf, i6.MatInput, i7.MatFormField, i7.MatLabel, i7.MatError, i8.MatButton, i9.MatIcon, i10.ɵNgNoValidate, i10.DefaultValueAccessor, i10.NgControlStatus, i10.NgControlStatusGroup, i10.RequiredValidator, i10.NgModel, i10.NgForm, i11.MatCard, i11.MatCardContent, i4.TranslatePipe],\n        data: {\n          animation: [slideIn]\n        }\n      });\n    }\n  }\n  return AddCategoryComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}