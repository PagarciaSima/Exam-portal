{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { slideIn } from 'src/app/animations/animations';\nlet ViewQuizzesComponent = class ViewQuizzesComponent {\n  constructor(quizService, notificacionService, translate, router) {\n    this.quizService = quizService;\n    this.notificacionService = notificacionService;\n    this.translate = translate;\n    this.router = router;\n    this.quizzes = [];\n    this.page = 0;\n    this.size = 5;\n    this.totalPages = 1;\n    this.searchTerm = '';\n  }\n  ngOnInit() {\n    this.loadQuizzesPaged();\n  }\n  /**\r\n   * Fetches all quizzes from the backend service and assigns them to the local `quizzes` property.\r\n   * Displays an error notification if the request fails.\r\n   */\n  loadQuizzes() {\n    this.quizService.getQuizzes().subscribe({\n      next: data => {\n        this.quizzes = data;\n        console.log(this.quizzes);\n      },\n      error: error => {\n        this.notificacionService.error(this.translate.instant('QUIZZES_LOAD_ERROR'), this.translate.instant('ERROR'));\n        console.error('Error fetching quizzes:', error);\n      }\n    });\n  }\n  /**\r\n   * Loads a paginated list of quizzes from the server.\r\n   * Updates the local `quizzes` array and `totalPages` based on the response.\r\n   */\n  loadQuizzesPaged() {\n    this.quizService.getQuizzesPaged(this.page, this.size, this.searchTerm).subscribe({\n      next: data => {\n        this.quizzes = data.content;\n        this.totalPages = data.totalPages;\n      },\n      error: error => {\n        this.notificacionService.error(this.translate.instant('QUIZZES_LOAD_ERROR'), this.translate.instant('ERROR'));\n        console.error('Error fetching quizzes:', error);\n      }\n    });\n  }\n  /**\r\n   *  Navigates the user to the \"Add Quiz\" page within the admin section.\r\n   */\n  addQuiz() {\n    this.router.navigate(['/admin/add-quiz']);\n  }\n  /**\r\n   *\r\n   * @param qId The ID of the quiz to be deleted.\r\n   * Deletes a quiz by its ID after user confirmation.\r\n   * Displays success or error notifications based on the outcome of the delete operation.\r\n   *\r\n   * @returns void\r\n   *\r\n   * @example\r\n   * this.deleteQuiz(1);\r\n   */\n  deleteQuiz(qId) {\n    this.notificacionService.confirm(this.translate.instant('QUIZ_DELETE_CONFIRM'), this.translate.instant('CONFIRM')).then(confirmed => {\n      if (confirmed) {\n        this.quizService.deleteQuiz(qId).subscribe({\n          next: () => {\n            this.notificacionService.success(this.translate.instant('QUIZ_DELETED_SUCCESS'), this.translate.instant('SUCCESS'));\n            this.quizzes = this.quizzes.filter(q => q.qId !== qId);\n          },\n          error: error => {\n            this.notificacionService.error(this.translate.instant('QUIZ_DELETE_ERROR'), this.translate.instant('ERROR'));\n            console.error('Error deleting quiz:', error);\n          }\n        });\n      }\n    });\n  }\n  /**\r\n   * @param qId The ID of the quiz to be edited.\r\n   * Navigates to the edit quiz page for the specified quiz ID.\r\n   */\n  editQuiz(qId) {\n    this.router.navigate(['/admin/add-quiz', qId]);\n  }\n  /**\r\n   * @param qId The ID of the quiz whose questions are to be viewed.\r\n   * @param title The title of the quiz whose questions are to be viewed.\r\n   */\n  viewQuestions(qId, title) {\n    this.router.navigate(['/admin/view-questions', qId, title]);\n  }\n  /**\r\n   * Called when the search term is changed.\r\n   * Updates the searchTerm property and reloads the quizzes.\r\n   * @param term The new search term.\r\n   */\n  onSearchTermChange(term) {\n    this.searchTerm = term;\n    this.page = 0; // Reset to first page on new search\n    this.loadQuizzesPaged();\n  }\n  /**\r\n   * Navigates to the specified page of quizzes.\r\n   * @param page The page number to navigate to.\r\n   */\n  goToPage(page) {\n    if (page >= 0 && page < this.totalPages) {\n      this.page = page;\n      this.loadQuizzesPaged();\n    }\n  }\n};\nViewQuizzesComponent = __decorate([Component({\n  selector: 'app-view-quizzes',\n  templateUrl: './view-quizzes.component.html',\n  styleUrls: ['./view-quizzes.component.css'],\n  animations: [slideIn]\n})], ViewQuizzesComponent);\nexport { ViewQuizzesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}