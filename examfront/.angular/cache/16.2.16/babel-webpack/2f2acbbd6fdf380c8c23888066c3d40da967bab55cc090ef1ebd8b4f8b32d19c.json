{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\n/**\r\n * Service for handling user authentication and session management.\r\n * Provides methods for login, logout, token management, and user retrieval.\r\n */\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    /**\r\n     * Creates an instance of LoginService.\r\n     * @param http Angular HttpClient for API requests.\r\n     * @param router Angular Router for navigation.\r\n     */\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      /**\r\n       * Subject to hold the current user state.\r\n       */\n      this.userSubject = new BehaviorSubject(this.getUser());\n      /**\r\n       * Observable for subscribing to user state changes.\r\n       */\n      this.user$ = this.userSubject.asObservable();\n    }\n    /**\r\n     * Sends login credentials to the backend to generate a JWT token.\r\n     * @param loginData User credentials.\r\n     * @returns Observable emitting JwtResponse.\r\n     */\n    generateToken(loginData) {\n      return this.http.post(`${environment.apiUrl}/generate-token`, loginData);\n    }\n    /**\r\n     * Stores the JWT token in localStorage.\r\n     * @param token JWT token string.\r\n     * @returns True if token is stored.\r\n     */\n    loginUser(token) {\n      localStorage.setItem(\"token\", token);\n      return true;\n    }\n    /**\r\n     * Checks if the user is currently logged in.\r\n     * @returns True if token exists, false otherwise.\r\n     */\n    isLoggedIn() {\n      let tokenStr = localStorage.getItem(\"token\");\n      if (tokenStr == undefined || tokenStr == '' || tokenStr == null) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n    /**\r\n     * Retrieves the JWT token from localStorage.\r\n     * @returns JWT token string.\r\n     */\n    getToken() {\n      return localStorage.getItem(\"token\");\n    }\n    /**\r\n     * Stores the user object in localStorage and updates the user subject.\r\n     * @param user User object.\r\n     */\n    setUser(user) {\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      this.userSubject.next(user);\n    }\n    /**\r\n     * Logs out the user by removing token and user from localStorage,\r\n     * updates the user subject, and navigates to the login page.\r\n     */\n    logout() {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user\");\n      this.userSubject.next(null);\n      this.router.navigate(['/login']);\n    }\n    /**\r\n     * Retrieves the user object from localStorage.\r\n     * @returns User object or null if not found.\r\n     */\n    getUser() {\n      let userStr = localStorage.getItem(\"user\");\n      if (userStr != null) {\n        return JSON.parse(userStr);\n      } else {\n        return null;\n      }\n    }\n    /**\r\n     * Gets the role of the current user.\r\n     * @returns Role string.\r\n     */\n    getUserRole() {\n      let user = this.getUser();\n      return user.authorities[0].authority;\n    }\n    /**\r\n     * Fetches the current user from the backend.\r\n     * @returns Observable emitting User object.\r\n     */\n    getCurrentUser() {\n      return this.http.get(`${environment.apiUrl}/current-user`);\n    }\n    static {\n      this.ɵfac = function LoginService_Factory(t) {\n        return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: LoginService,\n        factory: LoginService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}