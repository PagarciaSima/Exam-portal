{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let QuizService = /*#__PURE__*/(() => {\n  class QuizService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.apiUrl;\n    }\n    /**\r\n     * @param quizId The ID of the quiz to retrieve.\r\n     * @returns An observable emitting the requested `Quiz` object.\r\n     */\n    getQuiz(quizId) {\n      return this.http.get(`${this.apiUrl}/quiz/${quizId}`);\n    }\n    /**\r\n     * Retrieves the list of all quizzes from the backend API.\r\n     *\r\n     * @returns {Observable<Quiz[]>} An observable emitting an array of `Quiz` objects.\r\n     *\r\n     * @remarks\r\n     * This method sends an HTTP GET request to the `/quiz/` endpoint of the configured API URL.\r\n     * The returned observable will emit the quizzes once the HTTP request completes successfully.\r\n     *\r\n     * @example\r\n     * this.quizService.getQuizzes().subscribe(quizzes => {\r\n     *   console.log(quizzes);\r\n     * });\r\n     */\n    getQuizzes() {\n      return this.http.get(`${this.apiUrl}/quiz/`);\n    }\n    /**\r\n     * Adds a new quiz by sending a POST request to the backend API.\r\n     *\r\n     * @param quiz - The quiz object to be added.\r\n     * @returns An Observable emitting the created Quiz object as returned by the API.\r\n     */\n    addQuiz(quiz) {\n      return this.http.post(`${this.apiUrl}/quiz/`, quiz);\n    }\n    /**\r\n     * Deletes a quiz by its ID.\r\n     *\r\n     * @param qId The ID of the quiz to be deleted.\r\n     * @returns An Observable emitting void.\r\n     */\n    deleteQuiz(qId) {\n      return this.http.delete(`${this.apiUrl}/quiz/${qId}`);\n    }\n    /**\r\n     * Updates an existing quiz.\r\n     *\r\n     * @param quiz The quiz object containing updated data.\r\n     * @returns An Observable emitting the updated Quiz object.\r\n     */\n    updateQuiz(quiz) {\n      return this.http.put(`${this.apiUrl}/quiz/`, quiz);\n    }\n    /**\r\n     * Retrieves paginated quizzes from the backend API.\r\n     * @param page The page number (zero-based).\r\n     * @param size The number of items per page.\r\n     * @returns An observable emitting a Page object with quizzes.\r\n     */\n    getQuizzesPaged(page, size, search) {\n      let params = `?page=${page}&size=${size}`;\n      if (search && search.trim()) {\n        params += `&search=${encodeURIComponent(search.trim())}`;\n      }\n      return this.http.get(`${this.apiUrl}/quiz/paged${params}`);\n    }\n    static {\n      this.ɵfac = function QuizService_Factory(t) {\n        return new (t || QuizService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: QuizService,\n        factory: QuizService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return QuizService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}