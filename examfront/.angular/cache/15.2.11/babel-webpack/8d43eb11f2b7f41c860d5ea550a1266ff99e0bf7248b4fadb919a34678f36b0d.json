{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n    }\n    /**\r\n    * Sends a POST request to create a new user in the backend.\r\n    *\r\n    * @param user The user object containing the registration data.\r\n    * @returns An Observable of the created User returned by the server.\r\n    *\r\n    */\n    addUser(user) {\n      return this.httpClient.post(`${environment.apiUrl}/user/`, user);\n    }\n    /**\r\n     * Updates the password for a user.\r\n     * @param userId The ID of the user whose password is to be updated.\r\n     * @param newPassword The new password to be set for the user.\r\n     * @returns An Observable containing a message indicating the result of the operation.\r\n     */\n    updatePassword(userId, newPassword) {\n      const body = {\n        newPassword\n      };\n      return this.httpClient.patch(`${environment.apiUrl}/user/${userId}/password`, body);\n    }\n    /**\r\n     * Uploads a profile picture for the specified user.\r\n     * @param userId The ID of the user.\r\n     * @param file The profile picture file to upload.\r\n     * @returns An Observable containing the profileUrl or error message.\r\n     */\n    uploadProfilePicture(userId, file) {\n      const formData = new FormData();\n      formData.append('file', file);\n      return this.httpClient.post(`${environment.apiUrl}/user/${userId}/profile`, formData);\n    }\n    /**\r\n     * Deletes the profile picture for the specified user.\r\n     * @param userId The ID of the user.\r\n     * @returns An Observable containing a success or error message.\r\n     */\n    deleteProfilePicture(userId) {\n      return this.httpClient.delete(`${environment.apiUrl}/user/${userId}/profile`);\n    }\n    /**\r\n     * Updates the user profile.\r\n     * @param userId The ID of the user.\r\n     * @param updatedUser The updated user data.\r\n     * @returns An Observable of the updated User.\r\n     */\n    updateUser(userId, updatedUser) {\n      return this.httpClient.put(`${environment.apiUrl}/user/${userId}`, updatedUser);\n    }\n    static {\n      this.ɵfac = function UserService_Factory(t) {\n        return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UserService,\n        factory: UserService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}