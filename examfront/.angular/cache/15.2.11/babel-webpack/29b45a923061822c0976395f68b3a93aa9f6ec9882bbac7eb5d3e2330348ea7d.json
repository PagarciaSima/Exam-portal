{"ast":null,"code":"import { fadeInUp } from 'src/app/animations/animations';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/login.service\";\nimport * as i2 from \"src/app/services/notification.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ngx-translate/core\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/forms\";\nimport * as i10 from \"@angular/material/card\";\nfunction LoginComponent_mat_error_23_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, \"USERNAME_REQUIRED\"));\n  }\n}\nfunction LoginComponent_mat_error_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\", 25);\n    i0.ɵɵtemplate(1, LoginComponent_mat_error_23_span_1_Template, 3, 3, \"span\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(18);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r1.errors == null ? null : _r1.errors.required);\n  }\n}\nfunction LoginComponent_mat_error_31_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, \"PASSWORD_REQUIRED\"));\n  }\n}\nfunction LoginComponent_mat_error_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\", 27);\n    i0.ɵɵtemplate(1, LoginComponent_mat_error_31_span_1_Template, 3, 3, \"span\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r3 = i0.ɵɵreference(29);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r3.errors == null ? null : _r3.errors.required);\n  }\n}\n/**\r\n * Component responsible for handling user login functionality.\r\n *\r\n * - Manages login form data and submission.\r\n * - Interacts with `LoginService` to authenticate users and retrieve JWT tokens.\r\n * - Displays notifications using `NotificationService` for success or error events.\r\n * - Redirects users based on their roles (`ADMIN`, `NORMAL`) after successful login.\r\n * - Handles login errors and resets password field on failure.\r\n *\r\n * @remarks\r\n * This component assumes that `LoginService` provides methods for token generation, user retrieval, and session management.\r\n *\r\n * @example\r\n * ```html\r\n * <form (ngSubmit)=\"formSubmit()\">\r\n *   <!-- form fields for username and password -->\r\n * </form>\r\n * ```\r\n */\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(loginService, notificationService, router, translate) {\n      this.loginService = loginService;\n      this.notificationService = notificationService;\n      this.router = router;\n      this.translate = translate;\n      this.loginData = {\n        username: '',\n        password: ''\n      };\n    }\n    ngOnInit() {}\n    /**\r\n     * Handles the login form submission by generating a JWT token and authenticating the user.\r\n     *\r\n     * - Calls `loginService.generateToken` with the provided login data.\r\n     * - On successful token generation, displays a success notification and logs in the user.\r\n     * - Fetches the current user details and sets the user in the login service.\r\n     * - Redirects the user based on their role or other criteria.\r\n     * - Handles errors during token generation or user retrieval by invoking `handleLoginError`.\r\n     */\n    formSubmit() {\n      this.loginService.generateToken(this.loginData).subscribe({\n        next: jwtResponse => {\n          this.notificationService.success(this.translate.instant('LOGIN_SUCCESS'), this.translate.instant('SUCCESS'));\n          this.loginService.loginUser(jwtResponse.token);\n          this.loginService.getCurrentUser().subscribe({\n            next: user => {\n              this.loginService.setUser(user);\n              this.redirectUser(user);\n            },\n            error: err => this.handleLoginError(err)\n          });\n        },\n        error: err => this.handleLoginError(err)\n      });\n    }\n    /**\r\n     * Redirects the user to the appropriate route based on their authorities.\r\n     *\r\n     * - If the user has the \"ADMIN\" authority, navigates to the 'admin' route.\r\n     * - If the user has the \"NORMAL\" authority, navigates to the 'user-dashboard' route.\r\n     * - If the user has neither authority, logs the user out.\r\n     *\r\n     * @param user The user object containing authority information.\r\n     */\n    redirectUser(user) {\n      const authorities = user.authorities?.map(a => a.authority).filter(Boolean) || [];\n      if (authorities.includes(\"ADMIN\")) {\n        this.router.navigate(['admin']);\n      } else if (authorities.includes(\"NORMAL\")) {\n        this.router.navigate(['user-dashboard']);\n      } else {\n        this.loginService.logout();\n      }\n    }\n    /**\r\n     * Handles errors that occur during the login process.\r\n     * Displays an appropriate error notification to the user and clears the password field.\r\n     *\r\n     * @param err - The error object received from the failed login attempt.\r\n     *   If the error status is 401, displays a specific message for invalid credentials.\r\n     */\n    handleLoginError(err) {\n      let errorMessage = this.translate.instant('LOGIN_FAILED');\n      if (err.status === 401) {\n        errorMessage = err.error?.error ? this.translate.instant('INVALID_CREDENTIALS') : this.translate.instant('INVALID_CREDENTIALS');\n      }\n      this.notificationService.error(errorMessage, this.translate.instant('ERROR'));\n      this.loginData.password = '';\n    }\n    static {\n      this.ɵfac = function LoginComponent_Factory(t) {\n        return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.LoginService), i0.ɵɵdirectiveInject(i2.NotificationService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.TranslateService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: LoginComponent,\n        selectors: [[\"app-login\"]],\n        decls: 48,\n        vars: 42,\n        consts: [[1, \"bootstrap-wrapper\"], [1, \"container\"], [1, \"row\", \"login-wrapper\"], [1, \"container\", \"img-hover-zoom\"], [\"routerLink\", \"/\", \"aria-label\", \"Ir a la p\\u00E1gina principal\"], [\"src\", \"../../../assets/exam-portal.png\", \"alt\", \"Exam Portal Logo\", 1, \"signup-img\"], [\"id\", \"login-title\", 1, \"text-center\"], [\"aria-labelledby\", \"login-title\", \"autocomplete\", \"on\", 3, \"ngSubmit\"], [\"loginForm\", \"ngForm\"], [\"appearance\", \"outline\", 1, \"full-width\", \"required-field\"], [\"for\", \"username-input\"], [\"id\", \"username-input\", \"name\", \"username\", \"matInput\", \"\", \"required\", \"\", \"autocomplete\", \"username\", \"aria-required\", \"true\", \"aria-describedby\", \"username-hint username-error\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\"], [\"username\", \"ngModel\"], [\"id\", \"username-hint\"], [\"id\", \"username-error\", 4, \"ngIf\"], [\"for\", \"password-input\"], [\"id\", \"password-input\", \"name\", \"password\", \"type\", \"password\", \"matInput\", \"\", \"required\", \"\", \"autocomplete\", \"current-password\", \"aria-required\", \"true\", \"aria-describedby\", \"password-error\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\"], [\"password\", \"ngModel\"], [\"id\", \"password-error\", 4, \"ngIf\"], [1, \"container\", \"text-center\", \"m-t-20\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\"], [\"type\", \"reset\", \"mat-raised-button\", \"\", \"color\", \"accent\", 1, \"ml20\"], [1, \"container\", \"text-center\", 2, \"margin-top\", \"15px\"], [\"role\", \"text\"], [\"routerLink\", \"/signup\", \"role\", \"link\", 1, \"signup-link\"], [\"id\", \"username-error\"], [4, \"ngIf\"], [\"id\", \"password-error\"]],\n        template: function LoginComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\")(4, \"mat-card\")(5, \"div\", 3)(6, \"a\", 4);\n            i0.ɵɵelement(7, \"img\", 5);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(8, \"h1\", 6);\n            i0.ɵɵtext(9);\n            i0.ɵɵpipe(10, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(11, \"form\", 7, 8);\n            i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_11_listener() {\n              return ctx.formSubmit();\n            });\n            i0.ɵɵelementStart(13, \"mat-form-field\", 9)(14, \"mat-label\", 10);\n            i0.ɵɵtext(15);\n            i0.ɵɵpipe(16, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(17, \"input\", 11, 12);\n            i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_17_listener($event) {\n              return ctx.loginData.username = $event;\n            });\n            i0.ɵɵpipe(19, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(20, \"mat-hint\", 13);\n            i0.ɵɵtext(21);\n            i0.ɵɵpipe(22, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(23, LoginComponent_mat_error_23_Template, 2, 1, \"mat-error\", 14);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(24, \"mat-form-field\", 9)(25, \"mat-label\", 15);\n            i0.ɵɵtext(26);\n            i0.ɵɵpipe(27, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(28, \"input\", 16, 17);\n            i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_28_listener($event) {\n              return ctx.loginData.password = $event;\n            });\n            i0.ɵɵpipe(30, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(31, LoginComponent_mat_error_31_Template, 2, 1, \"mat-error\", 18);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(32, \"div\", 19)(33, \"button\", 20);\n            i0.ɵɵtext(34);\n            i0.ɵɵpipe(35, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(36, \"button\", 21);\n            i0.ɵɵtext(37);\n            i0.ɵɵpipe(38, \"translate\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(39, \"div\", 22)(40, \"span\", 23);\n            i0.ɵɵpipe(41, \"translate\");\n            i0.ɵɵtext(42);\n            i0.ɵɵpipe(43, \"translate\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(44, \"a\", 24);\n            i0.ɵɵpipe(45, \"translate\");\n            i0.ɵɵtext(46);\n            i0.ɵɵpipe(47, \"translate\");\n            i0.ɵɵelementEnd()()()()()()()();\n          }\n          if (rf & 2) {\n            const _r0 = i0.ɵɵreference(12);\n            const _r1 = i0.ɵɵreference(18);\n            const _r3 = i0.ɵɵreference(29);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"@fadeInUp\", undefined);\n            i0.ɵɵadvance(5);\n            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(10, 18, \"LOGIN_FORM\"));\n            i0.ɵɵadvance(6);\n            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(16, 20, \"USERNAME_LABEL\"));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngModel\", ctx.loginData.username)(\"placeholder\", i0.ɵɵpipeBind1(19, 22, \"USERNAME_PLACEHOLDER\"));\n            i0.ɵɵadvance(4);\n            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(22, 24, \"USERNAME_HINT\"));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", _r1.invalid && (_r1.dirty || _r1.touched));\n            i0.ɵɵadvance(3);\n            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(27, 26, \"PASSWORD_LABEL\"));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngModel\", ctx.loginData.password)(\"placeholder\", i0.ɵɵpipeBind1(30, 28, \"PASSWORD_PLACEHOLDER\"));\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", _r3.invalid && (_r3.dirty || _r3.touched));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"disabled\", _r0.invalid);\n            i0.ɵɵadvance(1);\n            i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(35, 30, \"LOGIN\"), \" \");\n            i0.ɵɵadvance(3);\n            i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(38, 32, \"CLEAR_BUTTON\"), \" \");\n            i0.ɵɵadvance(3);\n            i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(41, 34, \"NO_ACCOUNT\"));\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(43, 36, \"NO_ACCOUNT\"), \" \");\n            i0.ɵɵadvance(2);\n            i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(45, 38, \"SIGN_UP\"));\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(47, 40, \"SIGN_UP\"), \" \");\n          }\n        },\n        dependencies: [i5.NgIf, i3.RouterLink, i6.MatInput, i7.MatFormField, i7.MatLabel, i7.MatHint, i7.MatError, i8.MatButton, i9.ɵNgNoValidate, i9.DefaultValueAccessor, i9.NgControlStatus, i9.NgControlStatusGroup, i9.RequiredValidator, i9.NgModel, i9.NgForm, i10.MatCard, i4.TranslatePipe],\n        styles: [\".signup-img[_ngcontent-%COMP%]{width:120px;height:120px;border-radius:50%;object-fit:cover;display:block;margin:0 auto 20px}.full-width[_ngcontent-%COMP%]{width:100%}.signup-link[_ngcontent-%COMP%]{margin-left:5px;text-decoration:none;color:#3f51b5}.login-wrapper[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:calc(100vh - 65px)}mat-card[_ngcontent-%COMP%]{width:500px;padding:20px}\"],\n        data: {\n          animation: [fadeInUp]\n        }\n      });\n    }\n  }\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}